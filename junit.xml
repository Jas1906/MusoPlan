<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="87" failures="0" errors="0" time="0.634">
  <testsuite name="registerMusician Function" errors="0" failures="0" skipped="0" timestamp="2023-12-07T22:37:39" time="0.348" tests="17">
    <testcase classname="registerMusician Function input is valid and should register musician" name="registerMusician Function input is valid and should register musician" time="0.003">
    </testcase>
    <testcase classname="registerMusician Function throws an error when musician name is less than 3 characters" name="registerMusician Function throws an error when musician name is less than 3 characters" time="0.023">
    </testcase>
    <testcase classname="registerMusician Function throws an error because user does not input the instrument type" name="registerMusician Function throws an error because user does not input the instrument type" time="0.001">
    </testcase>
    <testcase classname="registerMusician Function throws an error because user input negative years playing" name="registerMusician Function throws an error because user input negative years playing" time="0">
    </testcase>
    <testcase classname="registerMusician Function throws an error because user input less than 50 hourly rate" name="registerMusician Function throws an error because user input less than 50 hourly rate" time="0.001">
    </testcase>
    <testcase classname="musicianRegistration Function checking musicianRegistration function and should be valid" name="musicianRegistration Function checking musicianRegistration function and should be valid" time="0.001">
    </testcase>
    <testcase classname="musicianRegistration Function checking musicianRegistration function and name should be empty since it does not meet the requirement length" name="musicianRegistration Function checking musicianRegistration function and name should be empty since it does not meet the requirement length" time="0.022">
    </testcase>
    <testcase classname="musicianRegistration Function checking musicianRegistration function and hourly_rate should be empty since its not over 50" name="musicianRegistration Function checking musicianRegistration function and hourly_rate should be empty since its not over 50" time="0.002">
    </testcase>
    <testcase classname="musicianRegistration Function checking musicianRegistration function and years playing should be empty since its negative" name="musicianRegistration Function checking musicianRegistration function and years playing should be empty since its negative" time="0.004">
    </testcase>
    <testcase classname="registerTroupe Function input is valid and should register troupe" name="registerTroupe Function input is valid and should register troupe" time="0.001">
    </testcase>
    <testcase classname="registerTroupe Function throws an error when troupe name is less than 3 characters" name="registerTroupe Function throws an error when troupe name is less than 3 characters" time="0.001">
    </testcase>
    <testcase classname="registerTroupe Function throws an error when genre is not valid name" name="registerTroupe Function throws an error when genre is not valid name" time="0.001">
    </testcase>
    <testcase classname="registerTroupe Function throws an error when duration is over 3 " name="registerTroupe Function throws an error when duration is over 3 " time="0">
    </testcase>
    <testcase classname="troupeRegistration Function checking troupeRegistration function and should be valid, members should be empty since its for another function" name="troupeRegistration Function checking troupeRegistration function and should be valid, members should be empty since its for another function" time="0.001">
    </testcase>
    <testcase classname="troupeRegistration Function checking troupeRegistration function and name should be empty since it does not meet the length requirement, members should be empty since its for another function" name="troupeRegistration Function checking troupeRegistration function and name should be empty since it does not meet the length requirement, members should be empty since its for another function" time="0.002">
    </testcase>
    <testcase classname="troupeRegistration Function checking troupeRegistration function and duration should be empty since its more than 3 hr, members should be empty since its for another function" name="troupeRegistration Function checking troupeRegistration function and duration should be empty since its more than 3 hr, members should be empty since its for another function" time="0.002">
    </testcase>
    <testcase classname="troupeRegistration Function checking troupeRegistration function and genre should be empty since its not valid input, members should be empty since its for another function" name="troupeRegistration Function checking troupeRegistration function and genre should be empty since its not valid input, members should be empty since its for another function" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Musician class" errors="0" failures="0" skipped="0" timestamp="2023-12-07T22:37:40" time="0.154" tests="70">
    <testcase classname="Musician class Setting and getting musician name within valid length" name="Musician class Setting and getting musician name within valid length" time="0.002">
    </testcase>
    <testcase classname="Musician class Rejecting musician name with length less than 3 characters" name="Musician class Rejecting musician name with length less than 3 characters" time="0.005">
    </testcase>
    <testcase classname="Musician class Rejecting musician name with length more than 30 characters" name="Musician class Rejecting musician name with length more than 30 characters" time="0.002">
    </testcase>
    <testcase classname="Musician class Setting and getting years playing with a non-negative value" name="Musician class Setting and getting years playing with a non-negative value" time="0">
    </testcase>
    <testcase classname="Musician class Setting and getting years playing with a non-negative value" name="Musician class Setting and getting years playing with a non-negative value" time="0.001">
    </testcase>
    <testcase classname="Musician class Rejecting negative years playing value" name="Musician class Rejecting negative years playing value" time="0.002">
    </testcase>
    <testcase classname="Musician class Setting and getting hourly rate over 50" name="Musician class Setting and getting hourly rate over 50" time="0">
    </testcase>
    <testcase classname="Musician class Setting and getting hourly rate over 100" name="Musician class Setting and getting hourly rate over 100" time="0.001">
    </testcase>
    <testcase classname="Musician class Rejecting hourly rate less than 50" name="Musician class Rejecting hourly rate less than 50" time="0.002">
    </testcase>
    <testcase classname="Musician class Setting and getting interesting fact" name="Musician class Setting and getting interesting fact" time="0">
    </testcase>
    <testcase classname="Musician class Setting and getting interesting fact" name="Musician class Setting and getting interesting fact" time="0.001">
    </testcase>
    <testcase classname="Musician class Setting and getting interesting fact" name="Musician class Setting and getting interesting fact" time="0">
    </testcase>
    <testcase classname="Troupe class Setting and getting troupe name within valid length" name="Troupe class Setting and getting troupe name within valid length" time="0.001">
    </testcase>
    <testcase classname="Troupe class Rejecting troupe name with length less than 3 characters" name="Troupe class Rejecting troupe name with length less than 3 characters" time="0.001">
    </testcase>
    <testcase classname="Troupe class Rejecting troupe name with length more than 30 characters" name="Troupe class Rejecting troupe name with length more than 30 characters" time="0.001">
    </testcase>
    <testcase classname="Troupe class Setting and getting troupe genre &quot;rock&quot;" name="Troupe class Setting and getting troupe genre &quot;rock&quot;" time="0">
    </testcase>
    <testcase classname="Troupe class Setting and getting troupe genre &quot;jazz&quot;" name="Troupe class Setting and getting troupe genre &quot;jazz&quot;" time="0">
    </testcase>
    <testcase classname="Troupe class Setting and getting troupe genre &quot;pop&quot;" name="Troupe class Setting and getting troupe genre &quot;pop&quot;" time="0">
    </testcase>
    <testcase classname="Troupe class Rejecting invalid troupe genre" name="Troupe class Rejecting invalid troupe genre" time="0.001">
    </testcase>
    <testcase classname="Troupe class Setting and getting troupe minimum duration within valid range" name="Troupe class Setting and getting troupe minimum duration within valid range" time="0.001">
    </testcase>
    <testcase classname="Troupe class Rejecting troupe minimum duration less than 0.5 hours" name="Troupe class Rejecting troupe minimum duration less than 0.5 hours" time="0.001">
    </testcase>
    <testcase classname="Troupe class Rejecting troupe minimum duration more than 3 hours" name="Troupe class Rejecting troupe minimum duration more than 3 hours" time="0.001">
    </testcase>
    <testcase classname="Guitarist class Guitarist interesting fact" name="Guitarist class Guitarist interesting fact" time="0.001">
    </testcase>
    <testcase classname="Guitarist class Guitarist interesting fact" name="Guitarist class Guitarist interesting fact" time="0">
    </testcase>
    <testcase classname="Guitarist class Guitarist interesting fact" name="Guitarist class Guitarist interesting fact" time="0">
    </testcase>
    <testcase classname="Guitarist class Setting and getting musician name for Guitarist" name="Guitarist class Setting and getting musician name for Guitarist" time="0">
    </testcase>
    <testcase classname="Guitarist class Rejecting Guitarist name with invalid length" name="Guitarist class Rejecting Guitarist name with invalid length" time="0.002">
    </testcase>
    <testcase classname="Guitarist class Rejecting Guitarist name with invalid length" name="Guitarist class Rejecting Guitarist name with invalid length" time="0.002">
    </testcase>
    <testcase classname="Guitarist class Setting and getting years playing for Guitarist" name="Guitarist class Setting and getting years playing for Guitarist" time="0">
    </testcase>
    <testcase classname="Guitarist class Rejecting negative years playing value for Guitarist" name="Guitarist class Rejecting negative years playing value for Guitarist" time="0.001">
    </testcase>
    <testcase classname="Guitarist class Setting and getting years playing for Guitarist" name="Guitarist class Setting and getting years playing for Guitarist" time="0">
    </testcase>
    <testcase classname="Guitarist class Setting and getting hourly rate over 50 for Guitarist" name="Guitarist class Setting and getting hourly rate over 50 for Guitarist" time="0">
    </testcase>
    <testcase classname="Guitarist class Setting and getting hourly rate over 50 for Guitarist" name="Guitarist class Setting and getting hourly rate over 50 for Guitarist" time="0.001">
    </testcase>
    <testcase classname="Guitarist class Rejecting hourly rate less than or equal to 50 for Guitarist" name="Guitarist class Rejecting hourly rate less than or equal to 50 for Guitarist" time="0.001">
    </testcase>
    <testcase classname="Bassist class Bassist interesting fact" name="Bassist class Bassist interesting fact" time="0">
    </testcase>
    <testcase classname="Bassist class Bassist interesting fact" name="Bassist class Bassist interesting fact" time="0">
    </testcase>
    <testcase classname="Bassist class Bassist interesting fact" name="Bassist class Bassist interesting fact" time="0.001">
    </testcase>
    <testcase classname="Bassist class Setting and getting musician name for Bassist" name="Bassist class Setting and getting musician name for Bassist" time="0">
    </testcase>
    <testcase classname="Bassist class Setting and getting musician name for Bassist should be invalid since name is less than 3 characters" name="Bassist class Setting and getting musician name for Bassist should be invalid since name is less than 3 characters" time="0.002">
    </testcase>
    <testcase classname="Bassist class Setting and getting musician name for Bassist should be invalid since name is more than 30 characters" name="Bassist class Setting and getting musician name for Bassist should be invalid since name is more than 30 characters" time="0.002">
    </testcase>
    <testcase classname="Bassist class Setting and getting years playing for Bassist" name="Bassist class Setting and getting years playing for Bassist" time="0">
    </testcase>
    <testcase classname="Bassist class Rejecting negative years playing value for Bassist" name="Bassist class Rejecting negative years playing value for Bassist" time="0.001">
    </testcase>
    <testcase classname="Bassist class Setting and getting years playing for Bassist" name="Bassist class Setting and getting years playing for Bassist" time="0">
    </testcase>
    <testcase classname="Bassist class Setting and getting hourly rate over 50 for Bassist" name="Bassist class Setting and getting hourly rate over 50 for Bassist" time="0">
    </testcase>
    <testcase classname="Bassist class Rejecting hourly rate less than or equal to 50 for Bassist" name="Bassist class Rejecting hourly rate less than or equal to 50 for Bassist" time="0.004">
    </testcase>
    <testcase classname="Bassist class Setting and getting hourly rate over 50 for Bassist" name="Bassist class Setting and getting hourly rate over 50 for Bassist" time="0">
    </testcase>
    <testcase classname="Percussionist class Percussionist interesting fact" name="Percussionist class Percussionist interesting fact" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Percussionist interesting fact" name="Percussionist class Percussionist interesting fact" time="0">
    </testcase>
    <testcase classname="Percussionist class Percussionist interesting fact" name="Percussionist class Percussionist interesting fact" time="0">
    </testcase>
    <testcase classname="Percussionist class Setting and getting musician name for Percussionist" name="Percussionist class Setting and getting musician name for Percussionist" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Setting and getting musician name for Percussionist should be invalid since its less than 3 characters" name="Percussionist class Setting and getting musician name for Percussionist should be invalid since its less than 3 characters" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Setting and getting musician name for Percussionist should be invalid since its more than 30 characters" name="Percussionist class Setting and getting musician name for Percussionist should be invalid since its more than 30 characters" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Setting and getting years playing for Percussionist" name="Percussionist class Setting and getting years playing for Percussionist" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Rejecting negative years playing value for Percussionist" name="Percussionist class Rejecting negative years playing value for Percussionist" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Setting and getting years playing for Percussionist" name="Percussionist class Setting and getting years playing for Percussionist" time="0.001">
    </testcase>
    <testcase classname="Percussionist class Setting and getting hourly rate over 50 for Percussionist" name="Percussionist class Setting and getting hourly rate over 50 for Percussionist" time="0">
    </testcase>
    <testcase classname="Percussionist class Rejecting hourly rate less than or equal to 50 for Percussionist" name="Percussionist class Rejecting hourly rate less than or equal to 50 for Percussionist" time="0.002">
    </testcase>
    <testcase classname="Percussionist class Setting and getting hourly rate over 50 for Percussionist" name="Percussionist class Setting and getting hourly rate over 50 for Percussionist" time="0">
    </testcase>
    <testcase classname="Flautist class Flautist interesting fact" name="Flautist class Flautist interesting fact" time="0.001">
    </testcase>
    <testcase classname="Flautist class Flautist interesting fact" name="Flautist class Flautist interesting fact" time="0">
    </testcase>
    <testcase classname="Flautist class Flautist interesting fact" name="Flautist class Flautist interesting fact" time="0">
    </testcase>
    <testcase classname="Flautist class Setting and getting musician name for Flautist" name="Flautist class Setting and getting musician name for Flautist" time="0">
    </testcase>
    <testcase classname="Flautist class Setting and getting musician name for Flautist should be invalid since name is less than 3 characters" name="Flautist class Setting and getting musician name for Flautist should be invalid since name is less than 3 characters" time="0.001">
    </testcase>
    <testcase classname="Flautist class Setting and getting musician name for Flautist should be invalid since name is more than 30 characters" name="Flautist class Setting and getting musician name for Flautist should be invalid since name is more than 30 characters" time="0.002">
    </testcase>
    <testcase classname="Flautist class Setting and getting years playing for Flautist" name="Flautist class Setting and getting years playing for Flautist" time="0">
    </testcase>
    <testcase classname="Flautist class Rejecting negative years playing value for Flautist" name="Flautist class Rejecting negative years playing value for Flautist" time="0.002">
    </testcase>
    <testcase classname="Flautist class Setting and getting years playing for Flautist" name="Flautist class Setting and getting years playing for Flautist" time="0">
    </testcase>
    <testcase classname="Flautist class Setting and getting hourly rate over 50 for Flautist" name="Flautist class Setting and getting hourly rate over 50 for Flautist" time="0">
    </testcase>
    <testcase classname="Flautist class Rejecting hourly rate less than or equal to 50 for Flautist" name="Flautist class Rejecting hourly rate less than or equal to 50 for Flautist" time="0.001">
    </testcase>
    <testcase classname="Flautist class Setting and getting hourly rate over 50 for Flautist" name="Flautist class Setting and getting hourly rate over 50 for Flautist" time="0.001">
    </testcase>
  </testsuite>
</testsuites>